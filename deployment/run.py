# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykIwVaUYHygkludwbnMd1SDdirDhu9am
"""

import json
import tensorflow as tf
import os
import numpy as np
import base64
from PIL import Image
import io
from flask import Flask, request
import numpy as np

model = tf.keras.models.load_model('./mobilenetv3_edit_v1')
class_names = ['damaged', 'flood', 'good', 'jam']

def predicts(data):
    pred = model.predict(data)
    new_pred = pred.tolist()
    result = int(np.argmax(prediction))
    class_name = class_names[result]
    percent = float(np.max(pred * 100))
    if result==2:
        jsonDict = {
            'predClass': result,
            'className': class_name,
            'percentage': percent,
            'status': 0,
            'prediction': 'Invalid',
        }
    else:
        jsonDict = {
            'predClass': result,
            'className': class_name,
            'percentage': percent,
            'status': 1,
            'report': 'Valid',
        }
    return json.dumps(jsonDict)

def preprocess(data):
    imgdata = base64.decodebytes(data)
    image = Image.open(io.BytesIO(imgdata)).convert('RGB')
    image_new = image.resize((130, 130))
    x = np.array(image_new)
    x = np.expand_dims(x, axis=0)
    x = x / 255.0
    new_x = np.vstack([x])
    return new_x

app = Flask(__name__)

@app.route('/api/predict/img/', methods=['POST'])
def predict_full_img():
    item = request.json
    item_dict = json.loads(item, strict=False)
    encodedItem = item_dict['data'].encode('utf8')
    img_data = preprocess(encodedItem)
    jsonResponse = predicts(img_data)
    return jsonResponse


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))